<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>王延炯 · 观世界 | World Insight</title><link href="/" rel="alternate"></link><link href="/feeds/ideas.atom.xml" rel="self"></link><id>/</id><updated>2016-04-29T11:01:00+08:00</updated><entry><title>数字化的本质和基础</title><link href="/articles/digitization-essence-and-foundation" rel="alternate"></link><updated>2016-04-29T11:01:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2016-04-29:articles/digitization-essence-and-foundation</id><summary type="html">
&lt;!-- --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;数字化的概念&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;「企业数字化」是目前媒体、市场上的热点关键词。&lt;/p&gt;
&lt;p&gt;很多人都会困惑「数字化」、「信息化」、「自动化」、「标准化」这些概念的相互关系，好像时间又进行了一次轮回。&lt;/p&gt;
&lt;p&gt;「数字化」给人直观的感受是与「智能设备」、「物联网」、「移动互联」、「云计算」、「大数据」等等等等，这些强IT概念联系紧密。&lt;/p&gt;
&lt;p&gt;企业似乎只要把它们捏在一起，好像就实现了时髦的数字化转型，公司就可以和互联网、物联网联系在一起。&lt;/p&gt;
&lt;p&gt;在这里，也许没有办法给出直接的「数字化定义」，个人对于数字化的观点，是把「数字化」理解成一种现象，一种市场语言。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;数字化的本质&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;透过现实看本质，「数字化」战略的表象，其背后实质性的动作是「连接」。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;连接产生交换&lt;/li&gt;
&lt;li&gt;交换产生交易&lt;/li&gt;
&lt;li&gt;交易产生市场&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;比较实体与虚拟连接&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;早在大秦帝国，秦始皇做的最了不起的事情是「书同文、车同轨、统一度量衡」。&lt;/p&gt;
&lt;p&gt;这几件事情，是在整个国家之内统一了标准，降低了社会的沟通成本、协作成本，促进了社会的发展效率。&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;实体世界的连接&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现实世界的实体连接，已经通过长时间的工业化得到了沉淀，比如把插头插到插座就可以使用电能。&lt;/p&gt;
&lt;p&gt;工业标准定义了插头与插座的形状、交流电压的高低和频率。
即便是世界上没有完全统一，依然存在中国标准、美国标准、英国标准等等标准，市场上也提供了各种各样的转换适配器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;软件世界的连接&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了便于理解，对 &lt;strong&gt;交流电&lt;/strong&gt; 这个概念进行展开。如果用 &lt;tt class="docutils literal"&gt;java&lt;/tt&gt; 来描述一个 &lt;strong&gt;交流电&lt;/strong&gt; 的最基本属性，
比如电的 &lt;strong&gt;伏特&lt;/strong&gt; ，以及 &lt;strong&gt;频率&lt;/strong&gt; ，那么两个不同的程序员，会产生两种不同的描述。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id23"&gt;概念的代码实现&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;比如下面这两个代码对 &lt;strong&gt;交流电&lt;/strong&gt; 实现：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;我的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;wang.yanjiong.electronic&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wang.yanjiong.electronic.Volt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wang.yanjiong.electronic.Frequency&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AlternatingCurrent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;Volt&lt;/span&gt; &lt;span class="nf"&gt;getVolt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Frequency&lt;/span&gt; &lt;span class="nf"&gt;getFrequency&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

  &lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;其他人的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;other.people.electronic&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AC&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getVolt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getFrequency&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;

  &lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到两者都通过代码描述了 &lt;strong&gt;交流电&lt;/strong&gt; 这个概念，但在IT这个虚拟世界内，是截然不同的两个概念代码实现。&lt;/p&gt;
&lt;p&gt;在第一种 &lt;tt class="docutils literal"&gt;wang.yanjiong.electronic&lt;/tt&gt; 这种实现方法，是对电压 ( &lt;tt class="docutils literal"&gt;Volt&lt;/tt&gt; ) 和 电流 ( &lt;tt class="docutils literal"&gt;Frequency&lt;/tt&gt; ) 进行了更为复杂的定义。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id24"&gt;连接的代码实现&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;任何一个连接，都会有两方或者三方以上的出现。在两方的情况下，一般有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;提供方&lt;/li&gt;
&lt;li&gt;使用方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在三方的情况下，一般有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;提供方&lt;/li&gt;
&lt;li&gt;使用方&lt;/li&gt;
&lt;li&gt;监管方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为例了便于表述，以两方为例：&lt;/p&gt;
&lt;p&gt;提供方用 &lt;tt class="docutils literal"&gt;java&lt;/tt&gt; 代码声明了一个接口 (API, Applicaion Programming Interface)， 便于使用方获得全世界的各种 &lt;strong&gt;交流电&lt;/strong&gt; 信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;wang.yanjiong.connect&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wang.yanjiong.electronic.AlternatingCurrent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ProviderAPI&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;AlternatingCurrent&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;getAlternatingCurrents&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用方同样用 &lt;tt class="docutils literal"&gt;java&lt;/tt&gt; 完成了使用代码的编写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;other.people.electronic&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConsumerService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;AC&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;acs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProviderAPI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAlternatingCurrents&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很显然，使用方的代码，在编译的过程中就会出现错误，因为使用方没有 &lt;tt class="docutils literal"&gt;引用&lt;/tt&gt; 提供方关于 &lt;tt class="docutils literal"&gt;ProviderAPI&lt;/tt&gt; 的相关定义。&lt;/p&gt;
&lt;p&gt;通过对这个例子的分析，提供方和使用方不在同一个虚拟世界里，两者无法进行「连接」。&lt;/p&gt;
&lt;p&gt;进一步的，假设提供方与使用方分属于两个不同的企业，部署于两个完全物理隔离的机房，那这两者要进行一次有效的「连接」是完全不可能实现的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;数字化的基础&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;分领域统一标准&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id27"&gt;标准制定&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;通过上述两个例子的对比，在软件层面实现数字化，第一要务是实现统一「标准」。在前文的例子里，对于 &lt;strong&gt;电流&lt;/strong&gt; 的描述，就应该首先被统一。&lt;/p&gt;
&lt;p&gt;「标准」根据个人的实践和理解，包含两个要素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;概念&lt;/p&gt;
&lt;p&gt;对于一个现象，给定一个便于理解的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;关系&lt;/p&gt;
&lt;p&gt;不同概念之间的关联关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，概念来自于人的认知，而人的认知又受制于人的知识、人的经历。&lt;/p&gt;
&lt;p&gt;标准的建立，应该是根据的目标适用领域以及对外影响范围进行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id28"&gt;领域划分&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;越是抽象的概念、越是抽象的标准，包容的万物越多，难度也越大。&lt;/p&gt;
&lt;p&gt;某种意义下，领域的划分，也是因为一种抽象无法覆盖多个领域。现实的例子，就是社会的行业划分。&lt;/p&gt;
&lt;p&gt;对于企业而言，标准的统一是一件相当困难的事，因为短期内效益没有体现，并且使用标准规范企业内部和外部的行为，需要有执行力的保障。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id29"&gt;重要性评价&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;标准的重要性和影响面，可以通过对标准的引用次数来确定。这种模型类似于 &lt;a class="reference internal" href="#page-rank"&gt;Page Rank&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;标准的引用包含两个方面：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;领域内部&lt;/li&gt;
&lt;li&gt;领域外部&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;适应变化的机制&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;变化，来自于人的认知，来自于社会的进步，来自于科技进步对人类产生的影响，来自于对本质的深入理解，来自于方方面面。&lt;/p&gt;
&lt;p&gt;企业信息系统，是一个高精度匹配的机器，任何一行关键代码的变更，都可能会导致整个系统无法正常工作。&lt;/p&gt;
&lt;p&gt;一旦标准中的概念或者关系发生变化，需要有快速发现影响范围，并迅速制定有效的应对方案。&lt;/p&gt;
&lt;p&gt;企业建立一套适应变化的机制，应当包含以下要素：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;概念的文字性描述&lt;/li&gt;
&lt;li&gt;概念的多语言代码的生成和快速引用&lt;/li&gt;
&lt;li&gt;概念代码对应在不同视角、不同领域之间的转换和适配&lt;/li&gt;
&lt;li&gt;变化的影响面分析&lt;/li&gt;
&lt;li&gt;适应性变更的快速交付&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="mofmtl"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;MOF与MTL&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id15"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id32"&gt;概念模型&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;模型是表述一个领域内部概念之间关系的方法。&lt;/p&gt;
&lt;p&gt;概念模型是在一个系统交付过程中，设计的核心之一。&lt;/p&gt;
&lt;p&gt;根据 &lt;a class="reference internal" href="#mof"&gt;MOF&lt;/a&gt; (Meta-Object Facility) 的概念以及 &lt;tt class="docutils literal"&gt;ISO/IEC 19508:2014&lt;/tt&gt; 的 &lt;tt class="docutils literal"&gt;Object Management Group Meta Object Facility (MOF) Core&lt;/tt&gt; 国际标准，一个「概念」在信息系统落地的过程，可以包含层结构：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;实例 -- 一个概念（在计算机系统中）的具体实例化对象&lt;/li&gt;
&lt;li&gt;模型 -- 描述一个概念的结构的定义，类似于上文的 &lt;tt class="docutils literal"&gt;AlternatingCurrent&lt;/tt&gt; 这个 &lt;tt class="docutils literal"&gt;Java class&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;元模型 -- 描述模型的模型，例如 &lt;a class="reference internal" href="#uml"&gt;UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;元元模型 -- 描述模型的模型的模型，例如 &lt;a class="reference internal" href="#mof"&gt;MOF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id33"&gt;模型转换&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;正因为概念是标准的一部分、模型是描述概念的方法，所以模型的转换会同时发生在宏观和微观两个层面：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在宏观层面：当一个模型从一个领域走进另外一个领域&lt;/li&gt;
&lt;li&gt;在微观层面：当一个模型从领域中的一个视角转换为另外一个视角&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;描述模型转换这件事，有专门的语言: MTL ( &lt;a class="reference internal" href="#model-transformation-language"&gt;Model transformation language&lt;/a&gt; )。
&lt;a class="reference internal" href="#atlas-transformation-language"&gt;ATLAS Transformation Language&lt;/a&gt; 是 MTL 的一个实现。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id34"&gt;扩展阅读&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="target" id="page-rank"&gt;Page Rank&lt;/span&gt;: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/PageRank"&gt;https://en.wikipedia.org/wiki/PageRank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="target" id="mof"&gt;MOF&lt;/span&gt;: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Meta-Object_Facility"&gt;https://en.wikipedia.org/wiki/Meta-Object_Facility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="target" id="mof-2-5"&gt;MOF 2.5&lt;/span&gt;: &lt;a class="reference external" href="http://www.omg.org/spec/MOF/2.5/"&gt;http://www.omg.org/spec/MOF/2.5/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="target" id="iso-iec-19508-2014"&gt;ISO/IEC 19508:2014&lt;/span&gt;: &lt;a class="reference external" href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=61844"&gt;http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=61844&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="target" id="uml"&gt;UML&lt;/span&gt;: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unified_Modeling_Language"&gt;https://en.wikipedia.org/wiki/Unified_Modeling_Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="target" id="model-transformation-language"&gt;Model transformation language&lt;/span&gt; : &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Model_transformation_language"&gt;https://en.wikipedia.org/wiki/Model_transformation_language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="target" id="atlas-transformation-language"&gt;ATLAS Transformation Language&lt;/span&gt;: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ATLAS_Transformation_Language"&gt;https://en.wikipedia.org/wiki/ATLAS_Transformation_Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="数字化"></category><category term="标准"></category><category term="概念"></category><category term="MOF"></category><category term="MTL"></category></entry><entry><title>唯一性标识的生成策略</title><link href="/articles/UniqueIDGenerateStrategy" rel="alternate"></link><updated>2016-04-19T16:18:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2016-04-19:articles/UniqueIDGenerateStrategy</id><summary type="html">
&lt;!-- --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;「主数据」类型的生成策略&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;主数据是一类和客观对象产生较为紧密映射关系的数据。例如:「客户」，「产品」等等。&lt;/p&gt;
&lt;p&gt;这一类的数据会随着时间不但进行完善和修正，整体的数据生命周期较长。&lt;/p&gt;
&lt;p&gt;使用ID来表述这一类数据的主要侧重点有:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;隐私保护 - 权重5&lt;/li&gt;
&lt;li&gt;整体可用容量 - 权重5&lt;/li&gt;
&lt;li&gt;单位时间可用量 - 权重2&lt;/li&gt;
&lt;li&gt;首次生成简便性 - 权重2&lt;/li&gt;
&lt;li&gt;后期录入简便性 - 权重4&lt;/li&gt;
&lt;li&gt;后期迁移简便性 - 权重4&lt;/li&gt;
&lt;li&gt;人工阅读可预判性 - 权重5&lt;/li&gt;
&lt;li&gt;分库分表可路由性 - 权重5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，人工阅读可预判性包含&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;包含分类特征&lt;/li&gt;
&lt;li&gt;使用定长编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如, 身份证号「310109190001011235」,18个数字字母字符（18字节=144bit）, 最后一位为校验位
前6位为地域分类，7至14位为生日。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;「交易数据」类型的生成策略&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;交易数据是一类和某个活动或者行为对象相关的数据。例如「订单」，「消息」。&lt;/p&gt;
&lt;p&gt;这一类的数据会随着时间不但进行完善和修正，整体的数据生命周期较长。&lt;/p&gt;
&lt;p&gt;使用ID来表述这一类数据的主要侧重点有:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;隐私保护 - 权重4&lt;/li&gt;
&lt;li&gt;整体可用容量 - 权重5&lt;/li&gt;
&lt;li&gt;单位时间可用量 - 权重5&lt;/li&gt;
&lt;li&gt;首次生成简便性 - 权重4&lt;/li&gt;
&lt;li&gt;后期录入简便性 - 权重3&lt;/li&gt;
&lt;li&gt;后期迁移简便性 - 权重2&lt;/li&gt;
&lt;li&gt;人工阅读可预判性 - 权重2&lt;/li&gt;
&lt;li&gt;分库分表可路由性 - 权重5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，人工阅读可预判性包含&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;包含时间特征&lt;/li&gt;
&lt;li&gt;包含源与目标特征&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如, 淘宝订单号「1799508888858080」,16个数字（16字节=128bit）, 后四位数字为分库分表策略,
前12位与时间相关。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="唯一性标识"></category><category term="主数据"></category><category term="交易数据"></category></entry><entry><title>唯一性标识的矛盾</title><link href="/articles/TheConflictionOfID" rel="alternate"></link><updated>2016-04-14T16:18:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2016-04-14:articles/TheConflictionOfID</id><summary type="html">&lt;p&gt;唯一性标识 (Identity) 的缩写有「ID/Id/id/I.D.」目的是在一定的范围内，标识一个对象的唯一性。&lt;/p&gt;
&lt;p&gt;唯一性标识的生成方法众多，典型的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;算法生成类&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;数据库的自动生成，例如MySQL的Auto Increment自增特性&lt;/li&gt;
&lt;li&gt;分布式的生成算法，例如Twitter的64bit自增 &lt;a class="reference external" href="https://github.com/twitter/snowflake/releases/tag/snowflake-2010"&gt;SnowFlake2010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;128bit长的 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于具体场景，设计相关算法，在使用时自动生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;人工输入类&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;纯字母&lt;/li&gt;
&lt;li&gt;字母数字组合&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;唯一性标识的生成结果有两种&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;可转换为全数字，例如SnowFlake&lt;/li&gt;
&lt;li&gt;16进制字符，例如UUID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;唯一性标识的可用性评价维度&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;隐私保护&lt;/li&gt;
&lt;li&gt;整体可用容量&lt;/li&gt;
&lt;li&gt;单位时间可用量&lt;/li&gt;
&lt;li&gt;首次生成简便性&lt;/li&gt;
&lt;li&gt;后期录入简便性&lt;/li&gt;
&lt;li&gt;后期迁移简便性&lt;/li&gt;
&lt;li&gt;人工阅读可预判性&lt;/li&gt;
&lt;li&gt;分库分表可路由性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些具体的潜在的易用性维度&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;最好能够反映一些和具体使用场景有关的信息，例如身份证的前14位。&lt;/li&gt;
&lt;li&gt;尽可能的短&lt;/li&gt;
&lt;li&gt;简便的键盘输入，比如纯数字或纯小写字母&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="唯一性标识"></category></entry><entry><title>变是永远不变的现实情况</title><link href="/articles/Changing" rel="alternate"></link><updated>2016-03-30T08:41:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2016-03-30:articles/Changing</id><summary type="html">&lt;p&gt;系统的上线就意味着给业务带上了手铐。（已经忘了是从哪听来的这句话了）&lt;/p&gt;
&lt;p&gt;变是永远不变的现实情况，因为变是源自于认知的升级。&lt;/p&gt;
&lt;p&gt;变有哪几种类型呢？假设以纯人工方式进行一项业务：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;个体变了（单个职责 [ 功能 ] 变了，不影响他人）&lt;/li&gt;
&lt;li&gt;流程变了（分工界面 [ 接口 ] 变了，会影响他人）&lt;/li&gt;
&lt;li&gt;流量变了（功能分工都没变，就是要多安排人手 [ 水平扩容 ] ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，一个信息系统的交付，一定是以整体需求为基础，按照瀑布或敏捷方式进行交付的。&lt;/p&gt;
&lt;p&gt;在这个交付过程中，工程师们在落地形态上，会把一些「功能」和「接口」在物理形态上进行集成。&lt;/p&gt;
&lt;p&gt;这样高聚合的实现设计，一方面是由于过往硬件成本过高，另一方面也是由于担心跨进程所引起的不必要性能开销。&lt;/p&gt;
&lt;p&gt;高聚合的设计，为将来系统进行业务进化，种下了许多「技术债务」的种子。&lt;/p&gt;
&lt;p&gt;技术债务中的很大一部分，来自于后人对「业务逻辑」的不理解，没有文档，晦涩难懂的接口名称，一团乱麻的逻辑......&lt;/p&gt;
&lt;p&gt;在微服务落地的过程中，当系统落地方，接手一个完整的、冗长的业务需求说明，就意味着99%的场景下，微服务不太可能实现，因为很有可能看不见拆分的原则。&lt;/p&gt;
&lt;p&gt;也许有一种视角，就是能够知道一个企业中的全部业务流程，并对业务流程进行优化和缩短，也许这种方式是业务和技术都愿意看到的情况。&lt;/p&gt;
&lt;p&gt;一个微服务 ( Actor ) 应该是一个职能在虚拟世界中的投影，一组微服务构成的能力域 ( Domain ) 就应该是一个部门在虚拟世界中的投影。&lt;/p&gt;
&lt;p&gt;一个职能对应于一个微服务 ( Actor ) ，是合理的。&lt;/p&gt;
&lt;p&gt;微服务有多少种不同结构上的拓扑形态，应该是取决于自然社会的业务形态。&lt;/p&gt;
</summary><category term="架构"></category><category term="微服务"></category></entry><entry><title>信息系统和平行宇宙</title><link href="/articles/ITTheMirrorOfParallelUniverses" rel="alternate"></link><updated>2016-03-18T21:26:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2016-03-18:articles/ITTheMirrorOfParallelUniverses</id><summary type="html">&lt;p&gt;信息系统（软件和硬件）就是从自然世界向虚拟世界的映射。&lt;/p&gt;
&lt;p&gt;每个企业，每个行业，都以唯心的方式（意识决定形态，用自己的意识决定自己虚拟世界的形态）向虚拟世界映射。&lt;/p&gt;
&lt;p&gt;于是，这个自然世界形成了若干个、无数个虚拟世界，也就是自然世界的若干个平行宇宙。&lt;/p&gt;
&lt;p&gt;每个IT系统的所有者，都在想尽办法，更快、更精准的去刻画自己的平行宇宙，并在自己的宇宙里，分析自然世界，并把结果反作用于自然世界。&lt;/p&gt;
&lt;p&gt;任何一种依靠人类体力劳动和脑力劳动的方式，最终都会比不过以「智能信息系统」自己作为映射工具的方式。&lt;/p&gt;
&lt;p&gt;也许，正在打开的是一扇门，通往平行宇宙的一扇门。&lt;/p&gt;
</summary><category term="信息系统"></category><category term="平行宇宙"></category></entry><entry><title>好的架构师，挖空心思偷懒</title><link href="/articles/ArchitectArchitecture" rel="alternate"></link><updated>2016-03-11T21:11:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2016-03-11:articles/ArchitectArchitecture</id><summary type="html">&lt;p&gt;架构，是解决问题的模式。&lt;/p&gt;
&lt;p&gt;架构师，是这个模式的设计者。&lt;/p&gt;
&lt;p&gt;问题的出现，是因为人的贪婪。&lt;/p&gt;
&lt;p&gt;架构的出现，是因为人的偷懒。&lt;/p&gt;
&lt;p&gt;机器的出现，是人不想劳动。&lt;/p&gt;
&lt;p&gt;软件的出现，是人不想思考。&lt;/p&gt;
&lt;p&gt;架构的多变，是因为万物多变。&lt;/p&gt;
&lt;p&gt;架构的不变，是因为万物相通。&lt;/p&gt;
&lt;p&gt;好的架构，以不变应万变。&lt;/p&gt;
&lt;p&gt;好的架构，省时省力省心。&lt;/p&gt;
&lt;p&gt;好的架构，折射人的贪婪。&lt;/p&gt;
&lt;p&gt;好的架构师，挖空心思偷懒。&lt;/p&gt;
</summary><category term="架构师"></category><category term="架构"></category></entry><entry><title>从元宵节煮汤圆看架构的识别与设计</title><link href="/articles/TangYuanInsightArchitecture" rel="alternate"></link><updated>2016-02-22T16:33:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2016-02-22:articles/TangYuanInsightArchitecture</id><summary type="html">
&lt;!-- --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;架构定义&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;所谓架构，就是解决「人所遇到的问题」(简称问题)的办法。&lt;/p&gt;
&lt;p&gt;采用什么办法解决问题，和客观的条件有关，也和当事人有关。&lt;/p&gt;
&lt;p&gt;因此，办法会有很多种，背后所体现的理念会有不同，折射出的是不同的价值观。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;好架构的定义&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;「好」架构，应当是对架构使用人「简单」并且「通用性强」，可以解决「很多」人的类似问题。&lt;/p&gt;
&lt;p&gt;「好」架构，应当因地制宜，不要求额外的增加使用人的负担（比如额外采购设备，学习新的知识），增加使用人的使用成本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;煮汤圆的传统架构&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;煮汤圆的传统架构就是老一辈交代的煮汤圆方法。&lt;/p&gt;
&lt;p&gt;这里所描述的煮汤圆的方法，可能只是传统煮汤圆的方法之一，大致过程描述如下&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;取一锅干净的冷水&lt;/li&gt;
&lt;li&gt;把冷水煮开&lt;/li&gt;
&lt;li&gt;把适量的汤圆放入锅中&lt;/li&gt;
&lt;li&gt;等水再次烧开&lt;/li&gt;
&lt;li&gt;加入冷水，以保持汤圆不被煮破&lt;/li&gt;
&lt;li&gt;重复第4/5步若干次&lt;/li&gt;
&lt;li&gt;汤圆变熟，捞出享用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一定还有更多方法，因为煮汤圆的过程，和锅有关，和水有关，和火力有关，和被煮的汤圆数量和大小有关，不可避免的煮汤圆的人有关，等等等等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;煮汤圆的传统架构好不好&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;好。理由是：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;对于汤圆怎么被熟的质变过程不需要了解（不需要了解物理原理）&lt;/li&gt;
&lt;li&gt;可视化的温度，水煮沸了，就说明温度到达100摄氏度（一个标准的大气压条件下）&lt;/li&gt;
&lt;li&gt;对于煮汤圆的设备不需要额外添置（常见的水、锅、煤气灶就可以）&lt;/li&gt;
&lt;li&gt;整体过程容易理解，实际操作性强（烧开加水的重复过程，三岁小孩也许都会）&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;好吃有卖相是煮汤圆的目标&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;直接目标是煮熟（基本前提）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题是，熟是一个定性非定量的修饰词。熟，需要能够被量化，量化之后才能被管理。&lt;/p&gt;
&lt;p&gt;于是熟的量化标准之一常常会被提及：汤圆至少要浮于水面之上。&lt;/p&gt;
&lt;p&gt;可问题又来了，浮在水面之上的汤圆不一定能保证在咬开之后，里面的馅料也是熟的。&lt;/p&gt;
&lt;p&gt;于是前辈们，还会告诉我们，等待汤圆略微发胖，这是提高汤圆馅料变熟的有效量化标准之一。因为胖，是肉眼可见，是可被量化管理的对象。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;间接目标是不煮破不煮糊（还得有卖相）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于汤圆的外部材料主要是糯米，糯米遇到水之后，尤其是沸水，会发生结构分解（是不是分子，因为作者不是食品和高分子学专家，不能细讲，也不能乱讲），其最终结果就是煮糊了，也就是糯米和水完全融合了在一起，汤圆已经没有了型。&lt;/p&gt;
&lt;p&gt;因为怕煮烂，所以老一辈会特别强调，加入反复加入冷水，让水保持在似开非开的状态。&lt;/p&gt;
&lt;p&gt;这种方法，一方面是保持煮汤圆所需要的温度，一方面是降低沸水所造成的汤圆不必要的翻动，避免加速汤圆煮烂。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;把煮熟汤圆「好吃」的关键要素（根据现象看本质）&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;热能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;热能，是使汤圆从生到熟发生变化的核心、必要条件。没有变熟所需要的热能，并保持在合理的温度，汤圆静静的放在那里，永远不会变熟（但可能会变质）。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时间，是控制汤圆发生质变的必要条件。时间需要和温度配合，才能达到让汤圆变熟的目的。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;潜意识的基本假设&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管多少类型的汤圆，大小基本固定，一般条件下，手工汤圆的大小，要比速冻机械制作的汤圆大一圈。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;被忽视的核心要素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;汤圆在被煮前的基本物理条件，是直接从冷冻室内取出，还是常温。&lt;/p&gt;
&lt;p&gt;需要注意的是，沸水和汤圆糯米外皮的物理接触，是热能的第一道传导方式。汤圆的糯米外皮和馅料，是第二道传导方式。&lt;/p&gt;
&lt;p&gt;糯米外皮与馅料的热传导方式相比把水煮沸是缓慢的，换句话说，糯米皮和馅料，是热的不良导体，导热性能比水差。&lt;/p&gt;
&lt;p&gt;同时，冰冻的馅料变熟所需要的热能要比常温馅料的多，但热传导的效率基本不变。&lt;/p&gt;
&lt;p&gt;在冰冻的状态下进行直接加热，势必造成加热的时间变长，这样一来，汤圆的糯米更容易发生煮烂，如果还采用翻滚的沸水煮，很难避免汤圆煮烂、馅刚熟的情况发生。&lt;/p&gt;
&lt;p&gt;所以，在煮汤圆之前，最好把冰冻的汤圆从冰箱取出，在室温下放置一段时间。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;到底要如何煮汤圆&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;煮汤圆的基本概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;汤圆本身、一次煮汤圆的总体数量、锅的容量、热源功率、热源功率的可条件范围。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;煮汤圆的领域分解&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;原材料供应商（汤圆）&lt;/li&gt;
&lt;li&gt;煮汤圆平台-热能供应商（天然气灶、煤气灶、电磁炉、电陶炉、煤球炉、煤油炉、烧柴火的灶等等）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是：这些热提供商的性能指标并不相同。比如，热功率（单位时间所提供的热能）提供热能可调节的范围。&lt;/p&gt;
&lt;p&gt;作者直观感受是：现代化的天然气灶、煤气灶、电磁炉，热功率可调节范围要大于煤球炉和烧柴火的灶。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;煮汤圆平台-恒温水容器供应商（水和锅）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;高中物理，告诉我们，水的比热容是很高的。所谓比热容，说的通俗一点，就是温度升高一度，所需要的（热）能量。&lt;/p&gt;
&lt;p&gt;所以，一个大锅里盛满的沸水，要比一个小锅盛满的沸水，所储藏的（热）能量多。&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;煮汤圆平台-熟汤圆交付集成商（煮汤圆的人）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;煮汤圆的人，首先要评估要煮的汤圆有多少，热能的获得方式是什么、可调节性有多强，锅有多大、里面可以放多少水。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;煮汤圆的基本流程&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用锅把水烧开&lt;/li&gt;
&lt;li&gt;下生汤圆，以最快的速度把水加热并接近沸点（接近水的沸点）&lt;/li&gt;
&lt;li&gt;在一段时间，保持一定的水温（接近沸点，避免沸水翻滚以保持汤圆卖相），直至变熟（汤圆上浮和变胖）&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;又快又好把汤圆煮熟（最佳实践）&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;找尽可能大的锅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大锅，意味着可以放更多的水。在把一批汤圆放入到沸水中之后，由于汤圆和水会直接发生热交换，导致水温降低，水的温度直接从沸点下降。&lt;/p&gt;
&lt;p&gt;举个极端的例子，在正在煮沸的一锅沸水中加入一滴常温的水，那么整个锅里的水，还将是煮沸的状态。原因是：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;一滴常温水，变成沸水的所需要的热量，热能提供商（比如煤气灶）可以快速提供。&lt;/li&gt;
&lt;li&gt;沸水的流动性，使得沸水和常温水的物理接触面增多，热交换速度变快。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个极端的例子告诉我们，由于一滴水加热至沸点的能量，远小于蒸锅沸水的能量，所以蒸锅水在此过程中，水温基本不变。&lt;/p&gt;
&lt;p&gt;回到煮汤圆的场景，大锅意味着加入常温的汤圆水温下降会变少。&lt;/p&gt;
&lt;p&gt;持续的高水温，有利于提高热传导的进行（势能差越大，能量交换越快），有利于缩短煮熟汤圆的时间，保持汤圆的卖相。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;把热源的功率发挥到最大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;快速提供热能，使放入生冷汤圆的之后水温迅速提高，需要两方面的配合:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;把热源开到最大（例如，把煤气灶开大火）&lt;/li&gt;
&lt;li&gt;增加火和锅的接触面积（选择平底锅和煤气灶，并把锅底放在煤气灶的火焰温度最高的外焰位置）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;保持准沸水的水温&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保持略接近于沸水的水温，获得最高效率的热传递同时，避免水的翻动导致汤圆解体。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;煮汤圆的锅，自身是具备一定散热功能的（在没有热源加热的情况下，水会停止沸腾和逐渐冷却至常温）&lt;/li&gt;
&lt;li&gt;在热源最小输出热能的情况下，需要加入冷水，才能保持水温在沸点以下，避免不必要的水沸腾动能释放，引起汤圆破相。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;非常规的花式煮汤圆秘籍（聪明人秀才艺）&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在家煮汤圆不反复加水&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前文所提到的，保持水温似开非开，是达成快速、不破相煮汤圆的必要条件。&lt;/p&gt;
&lt;p&gt;在当煮汤圆的装备得到技术革新之后，我们可以做到把热源功率变小，平衡锅自身散热和热源供给的平衡。&lt;/p&gt;
&lt;p&gt;同时，可以把锅容器，替换为玻璃材质，例如采用全玻璃锅，采用热功率无级可变的燃气和电气炉具。&lt;/p&gt;
&lt;p&gt;这样整个煮汤圆过程全程关上盖子，水蒸气蒸发所带走的热能，也能看到水是否被煮开。&lt;/p&gt;
&lt;p&gt;在实际操作过程中，只要保持水微微有些被煮沸，不对汤圆产生结构性破坏力。温度的用肉眼量化，结合控制火力大小的闭环控制。&lt;/p&gt;
&lt;p&gt;这样做的好处是，增加了煮汤圆的机械化可能，减少了过程中，对于加水这一环节的依赖，减少了对水的需求，增加了能源利用率。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;饭店煮汤圆「生熟混煮」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，控制水温的另外一个方法是，把加水，替换为加「生」汤圆。&lt;/p&gt;
&lt;p&gt;这种方法，对于执行人的个人素质和能力要求更高，需要相当的实际操作经验。&lt;/p&gt;
&lt;p&gt;其实，笔者相信，摄氏99度煮出来的汤圆，也是「熟」的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;智能煮汤圆产品设计（延伸阅读）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这里要表达的是，技术其实是可以给业务带来革新。&lt;/p&gt;
&lt;p&gt;煮了一辈子汤圆的人（业务方），可能一辈子都不会提出「智能」煮汤圆的技术需求。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;设计理念: 煮汤圆应该是不需要操心的，我只要「好吃」和「卖相好」的汤圆。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;食客（吃汤圆的人）只要买来汤圆，把汤圆投进煮汤圆机里，在汤圆被煮好的情况下会自动提示食客来享用，甚至自动放到碗里。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;突破技术限制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;技术限制: 识别汤圆馅变熟&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;目前被传承的量化方法是「上浮」和「变胖」&lt;/li&gt;
&lt;li&gt;目前需要最佳实践帮助和知道的是：上浮之后再煮多久&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术突破: 数字化汤圆馅变熟的技术指标&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;定位汤圆（因为水和汤圆的混合物，密度不一样）&lt;/li&gt;
&lt;li&gt;判断汤圆馅料的温度（在前一步的基础上，采用热感应?超声波频谱?的方式(请原谅作者对于这一领域缺乏了解)）&lt;/li&gt;
&lt;li&gt;恒温控制，保持水温接近于沸点但未到达沸点，避免由水的沸腾导致破相（笔者相信「99度」也能煮「熟」汤圆，当然这是在一个标准大气压的条件下）&lt;/li&gt;
&lt;li&gt;降低数字化成本，以控制产品的整体成品，使其变为消费品而不是概念产品或者奢侈品。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;口碑营销&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;消费者惊奇的发现，「智能煮汤圆机」其实还能煮馄饨、煮饺子...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="生活与架构"></category></entry><entry><title>从「差评级汽车4S店维修服务」看汽车服务行业的企业软件发展空间</title><link href="/articles/AutoRepair4SEnterpriseSoftwareEvolution" rel="alternate"></link><updated>2015-12-31T16:33:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2015-12-31:articles/AutoRepair4SEnterpriseSoftwareEvolution</id><summary type="html">
&lt;!-- --&gt;
&lt;p&gt;汽车已经成为中国大城市家庭出行主要方式之一，随之出现的大大小小事故，可能每位车主都会经历。&lt;/p&gt;
&lt;p&gt;如果出现一次多方事故，责任方，交警，保险公司，一定会成为事故处理的必要成员，很多时候定损中心也是大概率出现的主角。&lt;/p&gt;
&lt;p&gt;一站式修车（定损，维修，理赔），目前对于无责方而言，仍是困难重重。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;差评级汽车4S店维修服务&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这里，只聚焦维修过程，来看看「差评级汽车4S店维修服务」,背后折射出多少汽车服务行业管理水平与汽车服务企业软件的支撑力不足。&lt;/p&gt;
&lt;p&gt;首先，来体验一下一次真实的「差评级」的维修服务，涉及的汽车品牌则是德国三大汽车制造商巨头之一：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;车主在送车维修（维修部位为倒车雷达）过程中，在4S店的等待时间过长。&lt;/li&gt;
&lt;li&gt;车主在根据维修服务合同，准备取车前，2次主动电话联系4S店以确认准确的提车时间，都无法直接联系到接待专员。&lt;/li&gt;
&lt;li&gt;在上述每次沟通过程中，4S店接线员都需要询问车主姓名、被修车辆车牌号、联系电话以及接待的维修服务顾问姓名。&lt;/li&gt;
&lt;li&gt;当车主提车之后，车主以绝对信任的心态直接把车开走（没有对维修部位做复查），但在上路之后，发现需要更换新的倒车雷达竟然没有安装。&lt;/li&gt;
&lt;li&gt;车主返店再维修过程中，店方无人主动接待，依靠车主自己根据回忆服务专员脸部特征、体貌特征，人肉找到服务专员，进行投诉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上几点，处处都体现了企业的管理水平不到位，企业软件支撑不到位。&lt;/p&gt;
&lt;p&gt;要强调的是，软件对于传统企业来说不是技术，而是帮助企业业务运营和流程管理的有力工具。对于汽车制造商、服务商而言，软件使用成本则占企业运营总成本的一小部分。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;企业软件架构升级方向&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于各大品牌的汽车4S店来说，改进客户体验，保证乃至品牌形象，已经成为企业经营不可或缺的一环。从企业软件角度，至少可以有以下改进：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;汽车品牌商，以公有云为基础，统一各个4S店的各个内部信息系统，例如电话语音、客户管理、维修管理等等。每个4S店都将成为公有云的租户。&lt;/li&gt;
&lt;li&gt;打通内部信息系统，例如IVR(Interactive Voice Response, 互动式语音应答)系统、CRM(Customer Relationship Management, 客户关系管理系统)、车辆维修系统，实现对客户身份的即时识别。&lt;/li&gt;
&lt;li&gt;增加手持移动设备（例如智能手机、平板电脑）的支撑（如喷漆钣金之类的维修项目）需要做到接待专员的（维修前before，维修后after）拍照存档，提高向客户交车前的质量保障水平。这也是移动化改变业务流程的典型场景。&lt;/li&gt;
&lt;li&gt;打通内部系统与互联网公众账号运营，增加客户自服务能力。例如，客户不需要打电话查询维修车辆的维修进度、提车时间，减少客户与服务商的无效沟通成本。&lt;/li&gt;
&lt;li&gt;汽车服务企业，可以通过与互联网社交平台的对接，实现修理过程透明化，每个关键环节都可以有数字照片直接通过社交平台推送给客户。&lt;/li&gt;
&lt;li&gt;与互联网消费者服务评价平台对接，实现客户满意度向企业运营决策层的消息直达，减少满意度由第三方转述的信息丢失与走样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看出，传统服务行业，在移动互联时代，传统服务性行业的企业软件已经滞后于社会信息化发展。&lt;/p&gt;
&lt;p&gt;云计算与移动化，企业内部多系统实时数据互通，内部系统与互联网社交平台的集成，已经成为改善传统服务行业客户体验的必然之路。&lt;/p&gt;
&lt;p&gt;传统企业的软件架构，背后折射的是企业整体的业务管理水平；企业业务的升级，需要背后企业软件架构的升级。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="企业架构"></category></entry><entry><title>可运营的企业IT平台</title><link href="/articles/TheOperationableEnterpriceITPlatform" rel="alternate"></link><updated>2015-11-09T11:24:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2015-11-09:articles/TheOperationableEnterpriceITPlatform</id><summary type="html">
&lt;!-- --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;平台生产力&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;技术成本&lt;ul&gt;
&lt;li&gt;学习成本&lt;/li&gt;
&lt;li&gt;使用成本&lt;/li&gt;
&lt;li&gt;维护成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沟通成本&lt;ul&gt;
&lt;li&gt;业务与技术团队沟通&lt;/li&gt;
&lt;li&gt;技术团队内部沟通&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;业务价值&lt;ul&gt;
&lt;li&gt;业务需求交付速度&lt;/li&gt;
&lt;li&gt;业务创新力支撑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;平台可运营评价维度&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;人员素质可发展&lt;/li&gt;
&lt;li&gt;技术架构自主性&lt;/li&gt;
&lt;li&gt;业务支撑连续性&lt;/li&gt;
&lt;li&gt;上下游协作友好&lt;/li&gt;
&lt;li&gt;管理制度平台化&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;平台产力提升途径&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;平台自动化程度&lt;ul&gt;
&lt;li&gt;代码生成&lt;/li&gt;
&lt;li&gt;文档生成&lt;/li&gt;
&lt;li&gt;上下游协作流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协作自助化程度&lt;ul&gt;
&lt;li&gt;生产资料获得方式&lt;/li&gt;
&lt;li&gt;社会化提问与答疑，质量与影响范围量化评估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="企业架构"></category></entry><entry><title>传统企业与互联网企业的软件价值观</title><link href="/articles/TraditionalVsInternetEnterpriseSoftwareValues" rel="alternate"></link><updated>2015-10-20T22:52:00+08:00</updated><author><name>Wang YanJiong</name></author><id>tag:,2015-10-19:articles/TraditionalVsInternetEnterpriseSoftwareValues</id><summary type="html">
&lt;!-- --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;从单个计算机到互联网&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在中国大陆，计算机有一个更为形象的名字，电脑。从字面可以看出，它是一件帮助人类进行思考的机器。但决定计算机思考什么，如何进行思考的，就是程序。
把人类脑袋中的可重复的、机械性的脑力劳动，变为机器可重复执行的程序，这个过程就是软件过程。&lt;/p&gt;
&lt;p&gt;在计算机诞生之初，它所要解决的问题是科学计算，也因此得名计算机。可以想象，一个计算机的计算能力是有限的，但有了计算机网络，使得成千上万，乃至上亿的计算机可以协同工作，并形成更大的计算能力，也就为解放人类机械性脑里劳动，带来了想象空间。计算机也从科学家手里，走进了如今的平常百姓家。&lt;/p&gt;
&lt;p&gt;要让计算机为普通百姓服务，从衣食住行医多方面提高人们的生活质量，其先决条件是信息化。信息化，是将一件事情或者一个物品或者一个时间或者定量货币，以数字化的方式精确量化下来。随着计算机硬件的不断发展，整个社会的信息化成本逐步降低。从而，人与人的通信、交易过程方便的可以信息化，并在此基础之上形成如今的各种面相个人的互联网产品：例如，社交应用、电子商务、第三方支付、个人信贷平台。&lt;/p&gt;
&lt;p&gt;### 现今的互联网特征&lt;/p&gt;
&lt;p&gt;现在的互联网公司是以轻资产行业——除了计算机及网络本身，不需要其他生产工具的行业——为切入点，以数字化逐步改变了人的沟通方式、人的消费方式，乃至生活方式。&lt;/p&gt;
&lt;p&gt;如今互联网公司普遍具有以下三个特征：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;面向个人消费者（B2C）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于用户基数大，以计算机（含网络和存储）为生产工具的互联网公司，为单个用户服务的边际成本低，并且规模效应大。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;轻资产距离实体经济较远&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是蓬勃发展的社交应用（微信、微博），电子商务平台（淘宝、京东），还是个人金融（P2P金融），都远离消费品制造本身。即便是电商平台，与实体密切相关的是自身仓储信息化，物流环节则是和合作伙伴公司进行信息系统对接。电商平台，绕开了消费品诞生最为复杂的生产制造环节。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;经营虚拟对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是淘宝、或者大众点评，在显而易见的商业交易背后，有着对个人主观感受、人际关系这些虚拟概念的经营，并将其与商业过程进行良好无缝的融合，促进个人消费市场生态的良性发展。即便像是百度、谷歌这样的搜索行业寡头，也是以广告、产品推广作为盈利模式，根本上还是通过技术手段尽可能拉近买卖双方的距离。&lt;/p&gt;
&lt;p&gt;所以，互联网公司的生产资料是一些看不见、摸不着的“关系”，这也导致了互联网所极力倡导的用户体验，快速交付。因为这些生产资料，任何一家公司都可以触手可及，唯有与众不同和贴心，方能获得用户的长期青睐。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;传统行业的企业信息系统&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在传统行业里，有三大社会基础设施类行业的系统建设规模较大，它们是金融、电信、能源行业，每个企业所拥有的应用系统数量是成百上千，单个企业所使用的计算机规模也在数万至百万，或者更多。&lt;/p&gt;
&lt;p&gt;放眼传统金融行业，例如银行、证券、保险等细分行业，信息系统也是企业的核心生产工具。与第三方支付平台不同，商业银行有着社会基础设施的不可替代性，导致了其信息系统建设理念与互联网公司有着天壤之别，因为数据既是货币，所有交付行为都通过系统完成，所以其宗旨是在以账务为核心的会计准侧下，确保稳定、可靠零差错。&lt;/p&gt;
&lt;p&gt;电信、能源，都是以国家级重资产投资为核心的基础行业，其业务模式较为稳定，行业竞争性弱，主要受国家政策影响大。这类行业的信息系统主要解决两个方面的问题，重资产（数亿计的电信设备、电力设备）的信息化管理维护，面向个人与企业的业务营销，账务核销。&lt;/p&gt;
&lt;p&gt;为什么其他诸如工业制造行业的大公司（比如美国通用电气，德国西门子，德国大众汽车）信息系统并没有得到普通大众的关注呢？一个重要原因就是实体本身对一个行业业务模式变化的牵制作用。以汽车制造为例，其主营业务是设计和制造整车，信息系统的主要作用是一方面对物料、排产、供应链进行管理，另一方面对主营业务起支撑或者提高跨部门、供应商协作效率的作用。可以想象，并不会因为IT系统的一次变更上线，就直接诞生一个汽车的新产品，但很有可能是打通了来自于最终用户的个性化订单这个渠道。但在如今的互联网行业，一次IT系统变更上线，就可能具有行业的颠覆性。&lt;/p&gt;
&lt;p&gt;面对实体经济，面对工业制造行业，信息系统并不能像互联网一样，具备核心生产工具的地位。工业4.0和物联网，所涉猎的信息系统变革，其效果是加快企业对市场、对最终用户使用效果的感知，加快企业内外部实体多维度状态的感知，提高企业内部和上下游厂商的协作效率，从而整体提高社会实体经济的生产效率。&lt;/p&gt;
&lt;p&gt;### 重视软件交付过程&lt;/p&gt;
&lt;p&gt;通常一个具有人机交互功能（也就是带可视化操作界面）的企业信息系统，称之为应用系统。一个最简单的应用系统会包含前端可视化操作界面（Web）、后端业务逻辑（Service）、底层数据库（Database）以及存储（Storage）三个组成部分。将这样一个应用系统交付给企业内部的员工进行使用，以传统的软件工程方式进行建设，需要经过软件生命周期的六大阶段：需求分析、架构设计、编码实现、测试验证、上线运行、后期维护。&lt;/p&gt;
&lt;p&gt;对于复杂的应用系统，架构会变得更加复杂。这两者之间的差异，有着类似单间平房与摩天大楼的区别。其建设方法，制造工艺，也有显著区别。&lt;/p&gt;
&lt;p&gt;对于一个复杂应用系统，可能由不同的团队协作完成。这和建筑行业有负责基建、负责内部装修的不同工程承包商类似。每个工程分包团队只完成其专业领域的那部分，工程整体由总承包商进行统筹管理。&lt;/p&gt;
&lt;p&gt;对于一个复杂应用系统，可能采用一些通用的技术组件。这和建筑行业有不同标号的水泥，螺纹钢筋、光圆钢筋等不同规格类似。物料供应商则根据国际国家标准进行批量标准生产。在IT行业，这种通用组件则被称为中间件或基础软件。它的通用性并没有国际国家的强制标准，一般都以某一产品领域寡头的实施标准作为参考依据。&lt;/p&gt;
&lt;p&gt;而被非IT行业所广为熟知的程序员，则是编码实现这一环节的生力军，这一环节负责把业务需求变为代码，从而实现系统的业务功能。鲜为人知的架构师，则需要从业务需求、功能开发、测试验证、后期运维等多角度确定系统的基本框架，犹如确定一幢高楼大厦的主体结构。&lt;/p&gt;
&lt;p&gt;可以发现，人是信息系统的制造者，不同资历的从业人员，所交付的信息系统质量会有所不同。这类似实木家具的手工制作过程，不同技艺的工人，所制作的家具精致程度不一。&lt;/p&gt;
&lt;p&gt;虽然可以有方法论、软件工程学来指导和规范软件交付的过程，但软件最终是为一个企业或者组织提供相匹配服务，不同的行业特征、不同的信息技术发展时期、不同的组织结构、不同的系统建设方式，导致了世界上找不到两个一模一样的最终交付使用的信息系统，就好比世界上找不到两片一模一样的树叶。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;软件价值观&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;互联网公司&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;互联网公司的系统作为生产工具，一般都由自己员工进行开发、测试、维护。对外采购行为大多集中于主机、网络、存储等硬件设备。对于系统建设的理念是自主可控，为的是拥有极佳的业务变更适应性。另外，从互联网公司的业务视角出发，其信息系统可以根据行业特征进行优化，一般不采购上文所提到的中间件或者基础软件，大多使用免费开源的软件框架。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;传统行业&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传统行业的信息系统，作为业务支撑平台，一般都以自有信息化部门牵头招标，以对外采购软件产品配合系统集成商服务，对中间件产品进行二次开发，从而实现业务功能的交付。企业主体通常不具备自开发能力，依赖于外部资源。从软件生命周期角度，开发、测试、运维三大团体也很有可能分属不同的集成商，甚至是外包人员。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;投资构成比较&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以同样的投资成本，互联网公司愿意使用零成本的开源中间件和100%的人力成本，进行系统建设。而传统企业，则会使用90%以上的投资进行对外产品和服务采购，余下的10%则作为甲方的信息化办公室团队人员成本。&lt;/p&gt;
&lt;p&gt;即便是互联网公司所提出的去IOE（IBM, Oracle, EMC）口号向传统行业蔓延，但传统行业所需要的人才储备却远远跟不上转型需要。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;信息技术的社会价值&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;互联网＋／ 工业4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于传统行业，“互联网＋”或者“工业4.0”更多层面是引导以信息化优化生产过程，提高生产效率，不可能也不能照搬互联网以计算机系统作为生产工具的行业模式。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;“大众创业，万众创新”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;轻资产的互联网经济，已经被发展十余年拥有雄厚资金实力的互联网公司所操控。新想法，新创意可以被他们轻易复制和超越。&lt;/p&gt;
&lt;p&gt;创业和创新的社会环境，面对普通大众，也许成功的只有彩票级的概率吧。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;社会老龄化与延迟退休&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中国社会老龄化已经是一个不争的事实，其导致的问题是社会青壮年所创造的社会财富无法供养不参与社会劳动的老年人。&lt;/p&gt;
&lt;p&gt;直观的做法是以劳动人口数量直接来弥补社会劳动力的缺失，以创造足够的财富供养老人。&lt;/p&gt;
&lt;p&gt;中国劳动人口基数庞大，如果信息化手段能够提高社会生产效率，也许能够降低延迟退休政策所引起的群体排斥心理。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="企业架构"></category><category term="互联网+"></category><category term="工业4.0"></category><category term="软件价值观"></category></entry></feed>